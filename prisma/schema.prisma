// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//npx prisma studio
//npx prisma db push
//npx prisma migrate dev --name init
//npx prisma generate
//npx prisma db seed
//npx prisma migrate reset
//npx prisma db pull



//npx prisma migrate deploy
//npx prisma db seed
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  // BackOffice Roles
  BOOwner
  BOAdmin
  BOFinancial
  BOOperator

  // Client Roles
  ClientOwner
  ClientAdmin
  ClientFinancial
  ClientOperator
}

enum RequestType {
  AccountCreation
  RequestPassword
  InfoChanging
}

enum AccountStatus {
  PENDING
  CONFIRMED
  APPROVED
  EXCLUDED
}


// Models

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt

  uploadedTerms TermsOfUse[]
  userRequest      UserRequest[]
}
model UserRequest {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  requestType  RequestType
  generatedToken String?
  generatedCode  String?
  expires        DateTime

  createdOn    DateTime @default(now())
}


model Client {
  id      String @id @default(uuid())
  name    String
  cpfCnpj  BigInt?
  cep String?
  street String?
  number String?
  complement String?
  neighborhood String?
  city String?
  state String?
  country String?

  status    AccountStatus @default(PENDING)

  clientPlans   ClientPlan[]
  clientUsers   ClientUser[]
  requests      ClientRequest[]
  termsAccepted ClientTermsOfUse[]

  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
}

model ClientUser {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  cpfCnpj  BigInt
  phone    String
  role     Role
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  status AccountStatus @default(PENDING)
  confirmationCode String?
  isConfirmed Boolean @default(false)


  requests      ClientRequest[]
  acceptedTerms ClientTermsOfUse[]

  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
}

model Plan {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Float
  durationDays Int
  numberOfUsers Int? @default(1)
  isTrial      Boolean  @default(false)
  createdOn    DateTime @default(now())
  isActive     Boolean  @default(true)
  updatedOn    DateTime? @updatedAt

  

  clientPlans ClientPlan[]
}

model ClientPlan {
  id String @id @default(uuid())

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String

  current Boolean @default(true)

  periods ClientPeriodPlan[]

  createdOn DateTime @default(now())
  @@index([clientId, current])
  @@unique([clientId, current], name: "unique_current_plan_per_client")
}

model ClientPeriodPlan {
  id           String     @id @default(uuid())
  clientPlan   ClientPlan @relation(fields: [clientPlanId], references: [id])
  clientPlanId String

  startsAt     DateTime
  expiresAt    DateTime
  isTrial      Boolean  @default(false)
  isCurrent    Boolean  @default(false)
  wasConfirmed Boolean  @default(false)

  createdOn DateTime @default(now())
  @@index([clientPlanId, isCurrent]) 
  @@index([expiresAt])
  renewedFromId String? // ID do período anterior (para histórico)
  renewedFrom   ClientPeriodPlan? @relation("PeriodRenewal", fields: [renewedFromId], references: [id])
  renewals      ClientPeriodPlan[] @relation("PeriodRenewal")
}

model ClientRequest {
  id String @id @default(uuid())

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  clientUser   ClientUser @relation(fields: [clientUserId], references: [id])
  clientUserId String

  requestType    RequestType
  generatedToken String?
  generatedCode  String?
  expires        DateTime

  createdOn DateTime @default(now())
}

model TermsOfUse {
  id          String  @id @default(uuid())
  fileUrl     String
  description String?
  isCurrent   Boolean @default(false)

  uploadedById String // ID do User que fez o upload
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  createdOn DateTime @default(now())

  acceptedBy ClientTermsOfUse[]
}

model ClientTermsOfUse {
  id String @id @default(uuid())

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  terms   TermsOfUse @relation(fields: [termsId], references: [id])
  termsId String

  acceptedAt DateTime @default(now())

  acceptedById String // ID do ClientUser que aceitou
  acceptedBy   ClientUser @relation(fields: [acceptedById], references: [id])
}

//LOGIN Control
enum LoginResult {
  SUCCESS
  FAILURE
}

enum LoginContext {
  BACKOFFICE
  CLIENT
}

model LoginHistory {
  id        String       @id @default(uuid())
  userId    String // ID do User ou ClientUser (não terá FK)
  context   LoginContext // BACKOFFICE ou CLIENT
  result    LoginResult // SUCCESS ou FAILURE
  ipAddress String?
  userAgent String?
  createdOn DateTime     @default(now())
}
